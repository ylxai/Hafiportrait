name: HafiPortrait CI/CD (No Docker)

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: 'latest'

jobs:
  # Job 1: Lint and Test
  lint-and-test:
    name: Lint & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
    
    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
    
    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Run ESLint
      run: pnpm lint || echo "ESLint skipped - needs configuration"
    
    - name: Run TypeScript check
      run: pnpm type-check || echo "No type-check script found"
    
    - name: Run tests
      run: pnpm test || echo "No tests configured yet"

  # Job 2: Build Application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
    
    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
    
    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Build application
      run: pnpm build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: |
          .next/
          public/
        retention-days: 1

  # Job 3: Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [lint-and-test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_PORT || 22 }}
        script: |
          cd /home/ubuntu/stable
          
          # Run deployment script
          bash scripts/deploy-production.sh main
          
          # Verify deployment
          sleep 5
          curl -f http://localhost:3000/api/health || exit 1
          
          echo "‚úÖ Production deployment completed successfully!"

  # Job 4: Deploy to Development (Hot Reload Only)
  deploy-development:
    name: Deploy to Development (Hot Reload)
    runs-on: ubuntu-latest
    needs: [lint-and-test]  # No need to wait for build!
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
    environment: development
    
    steps:
    - name: Deploy to development environment
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_PORT || 22 }}
        script: |
          cd /home/ubuntu/dev-workspace
          
          # Simple git pull (no build needed for hot reload!)
          git pull origin dev
          
          # Install dependencies only if package.json changed
          if git diff HEAD~1 --name-only | grep -q "package.json\|pnpm-lock.yaml"; then
            echo "üì¶ Dependencies changed, installing..."
            pnpm install --frozen-lockfile
          else
            echo "üì¶ No dependency changes, skipping install"
          fi
          
          # Restart PM2 dev server (hot reload will handle the rest)
          pm2 restart hafiportrait-dev
          
          # Quick health check
          sleep 3
          curl -f http://localhost:3002/api/health || exit 1
          
          echo "‚úÖ Development environment updated! Hot reload active üî•"

  # Job 5: Notify Deployment Status
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-development]
    if: always()
    
    steps:
    - name: Notify production success
      if: needs.deploy-production.result == 'success'
      run: |
        echo "üéâ Production deployment successful!"
        echo "üåê Live at: http://147.251.255.227:3000"
    
    - name: Notify development success
      if: needs.deploy-development.result == 'success'
      run: |
        echo "üî• Development environment updated with hot reload!"
        echo "üåê Dev at: http://147.251.255.227:3002"
    
    - name: Notify failures
      if: needs.deploy-production.result == 'failure' || needs.deploy-development.result == 'failure'
      run: |
        echo "‚ùå Deployment failed! Check logs for details."