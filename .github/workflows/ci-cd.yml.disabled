name: HafiPortrait CI/CD (No Docker)

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: 'latest'

jobs:
  # Job 1: Lint and Test
  lint-and-test:
    name: Lint & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
    
    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
    
    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Run ESLint
      run: pnpm lint || echo "ESLint skipped - needs configuration"
    
    - name: Run TypeScript check
      run: pnpm type-check || echo "No type-check script found"
    
    - name: Run tests
      run: pnpm test || echo "No tests configured yet"

  # Job 2: Build Application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
    
    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
    
    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Build application
      env:
        # Supabase Configuration (required for build)
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL || 'https://placeholder.supabase.co' }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBsYWNlaG9sZGVyIiwicm9sZSI6ImFub24iLCJpYXQiOjE2NDUxOTI4MDAsImV4cCI6MTk2MDc2ODgwMH0.placeholder' }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY || 'placeholder-service-key' }}
        # Authentication Configuration (using GitHub Secrets)
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
        # Cloudflare R2 Configuration (required for build)
        CLOUDFLARE_R2_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_R2_ACCOUNT_ID }}
        CLOUDFLARE_R2_ACCESS_KEY_ID: ${{ secrets.CLOUDFLARE_R2_ACCESS_KEY_ID }}
        CLOUDFLARE_R2_SECRET_ACCESS_KEY: ${{ secrets.CLOUDFLARE_R2_SECRET_ACCESS_KEY }}
        CLOUDFLARE_R2_BUCKET_NAME: ${{ secrets.CLOUDFLARE_R2_BUCKET_NAME }}
        CLOUDFLARE_R2_ENDPOINT: ${{ secrets.CLOUDFLARE_R2_ENDPOINT }}
        # Google Drive Configuration (required for build)
        GOOGLE_DRIVE_CLIENT_ID: ${{ secrets.GOOGLE_DRIVE_CLIENT_ID }}
        GOOGLE_DRIVE_CLIENT_SECRET: ${{ secrets.GOOGLE_DRIVE_CLIENT_SECRET }}
        GOOGLE_DRIVE_REFRESH_TOKEN: ${{ secrets.GOOGLE_DRIVE_REFRESH_TOKEN }}
        GOOGLE_DRIVE_FOLDER_ID: ${{ secrets.GOOGLE_DRIVE_FOLDER_ID || 'root' }}
        GOOGLE_DRIVE_FOLDER_NAME: ${{ secrets.GOOGLE_DRIVE_FOLDER_NAME || 'HafiPortrait-Photos' }}
        GOOGLE_DRIVE_SHARED_FOLDER: ${{ secrets.GOOGLE_DRIVE_SHARED_FOLDER || 'false' }}
        # Cloudflare R2 Additional Configuration
        CLOUDFLARE_R2_CUSTOM_DOMAIN: ${{ secrets.CLOUDFLARE_R2_CUSTOM_DOMAIN }}
        CLOUDFLARE_R2_PUBLIC_URL: ${{ secrets.CLOUDFLARE_R2_PUBLIC_URL }}
        CLOUDFLARE_R2_REGION: ${{ secrets.CLOUDFLARE_R2_REGION || 'auto' }}
        # Smart Storage Configuration
        SMART_STORAGE_ENABLED: ${{ secrets.SMART_STORAGE_ENABLED || 'true' }}
        SMART_STORAGE_DEFAULT_TIER: ${{ secrets.SMART_STORAGE_DEFAULT_TIER || 'cloudflareR2' }}
        SMART_STORAGE_PRIMARY: ${{ secrets.SMART_STORAGE_PRIMARY || 'cloudflareR2' }}
        SMART_STORAGE_SECONDARY: ${{ secrets.SMART_STORAGE_SECONDARY || 'local' }}
        SMART_STORAGE_TERTIARY: ${{ secrets.SMART_STORAGE_TERTIARY || 'googleDrive' }}
        SMART_STORAGE_COMPRESSION_QUALITY: ${{ secrets.SMART_STORAGE_COMPRESSION_QUALITY || '60' }}
        # CORS and Security
        CORS_ORIGIN: ${{ secrets.CORS_ORIGIN }}
        ALLOWED_ORIGINS: ${{ secrets.ALLOWED_ORIGINS }}
        # Real-time Features
        NEXT_PUBLIC_USE_SOCKETIO: ${{ secrets.NEXT_PUBLIC_USE_SOCKETIO || 'true' }}
        NEXT_PUBLIC_SOCKETIO_URL: ${{ secrets.NEXT_PUBLIC_SOCKETIO_URL }}
        ENABLE_WEBSOCKET: ${{ secrets.ENABLE_WEBSOCKET || 'true' }}
        ENABLE_REAL_TIME_UPDATES: ${{ secrets.ENABLE_REAL_TIME_UPDATES || 'true' }}
        ENABLE_SOCKETIO_ROOMS: ${{ secrets.ENABLE_SOCKETIO_ROOMS || 'true' }}
        # Other required env vars for build
        NEXT_PUBLIC_APP_URL: ${{ secrets.NEXT_PUBLIC_APP_URL || 'https://hafiportrait.photography' }}
        NEXT_PUBLIC_ENV_MODE: production
        NEXT_TELEMETRY_DISABLED: 1
        LOCAL_BACKUP_PATH: ${{ secrets.LOCAL_BACKUP_PATH || '~/photos' }}
        NODE_ENV: production
      run: pnpm build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: |
          .next/
          public/
        retention-days: 1

  # Job 3: Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [lint-and-test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_PORT || 22 }}
        command_timeout: 10m
        script: |
          set -e  # Exit on any error
          
          echo "🚀 Starting production deployment..."
          cd /home/ubuntu/stable
          
          # Pull latest code
          echo "📥 Pulling latest code..."
          git fetch origin
          git checkout main
          git pull origin main
          
          # Load NVM environment with better error handling
          echo "🔧 Loading Node.js environment..."
          export NVM_DIR="$HOME/.nvm"
          if [ -s "$NVM_DIR/nvm.sh" ]; then
            source "$NVM_DIR/nvm.sh"
            source "$NVM_DIR/bash_completion" 2>/dev/null || true
            nvm use 20 2>/dev/null || nvm use node 2>/dev/null || nvm use default 2>/dev/null
            echo "✅ Node.js: $(node --version)"
            echo "✅ pnpm: $(pnpm --version)"
          else
            echo "⚠️ NVM not found, using system Node.js"
            export PATH="/home/ubuntu/.nvm/versions/node/v22.18.0/bin:$PATH"
          fi
          
          # Ensure PM2 is available
          if ! command -v pm2 &> /dev/null; then
            echo "📦 Installing PM2..."
            npm install -g pm2
          fi
          echo "✅ PM2: $(pm2 --version)"
          
          # Install dependencies only if changed
          if git diff HEAD~1 --name-only | grep -q "package.json\|pnpm-lock.yaml"; then
            echo "📦 Dependencies changed, installing..."
            pnpm install --frozen-lockfile
          else
            echo "📦 No dependency changes detected"
          fi
          
          # Restart PM2 with production environment
          echo "🔄 Restarting PM2 applications..."
          pm2 restart ecosystem.config.js --env production
          
          # Wait and verify deployment
          echo "⏳ Waiting for applications to start..."
          sleep 8
          
          echo "🏥 Performing health check..."
          if curl -f http://localhost:3000/api/health; then
            echo "✅ Production deployment completed successfully!"
          else
            echo "❌ Health check failed!"
            exit 1
          fi

  # Job 4: Deploy to Development (Hot Reload Only)
  deploy-development:
    name: Deploy to Development (Hot Reload)
    runs-on: ubuntu-latest
    needs: [lint-and-test]  # No need to wait for build!
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
    environment: development
    
    steps:
    - name: Deploy to development environment
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_PORT || 22 }}
        script: |
          cd /home/ubuntu/dev-workspace
          
          # Simple git pull (no build needed for hot reload!)
          git pull origin dev
          
          # Install dependencies only if package.json changed
          if git diff HEAD~1 --name-only | grep -q "package.json\|pnpm-lock.yaml"; then
            echo "📦 Dependencies changed, installing..."
            pnpm install --frozen-lockfile
          else
            echo "📦 No dependency changes, skipping install"
          fi
          
          # Restart PM2 dev server (hot reload will handle the rest)
          pm2 restart hafiportrait-dev
          
          # Quick health check
          sleep 3
          curl -f http://localhost:3002/api/health || exit 1
          
          echo "✅ Development environment updated! Hot reload active 🔥"

  # Job 5: Notify Deployment Status
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-development]
    if: always()
    
    steps:
    - name: Notify production success
      if: needs.deploy-production.result == 'success'
      run: |
        echo "🎉 Production deployment successful!"
        echo "🌐 Live at: http://147.251.255.227:3000"
    
    - name: Notify development success
      if: needs.deploy-development.result == 'success'
      run: |
        echo "🔥 Development environment updated with hot reload!"
        echo "🌐 Dev at: http://147.251.255.227:3002"
    
    - name: Notify failures
      if: needs.deploy-production.result == 'failure' || needs.deploy-development.result == 'failure'
      run: |
        echo "❌ Deployment failed! Check logs for details."