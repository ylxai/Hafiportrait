"use strict";(()=>{var e={};e.id=6477,e.ids=[6477],e.modules={20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},57441:e=>{e.exports=require("sharp")},32615:e=>{e.exports=require("http")},35240:e=>{e.exports=require("https")},68621:e=>{e.exports=require("punycode")},76162:e=>{e.exports=require("stream")},17360:e=>{e.exports=require("url")},71568:e=>{e.exports=require("zlib")},65092:(e,r,t)=>{t.r(r),t.d(r,{originalPathname:()=>x,patchFetch:()=>h,requestAsyncStorage:()=>m,routeModule:()=>c,serverHooks:()=>d,staticGenerationAsyncStorage:()=>l});var s={};t.r(s),t.d(s,{GET:()=>u});var i=t(30633),o=t(86488),a=t(13342),n=t(90223),p=t(68620);async function u(e){try{let e=await p.F.getSimpleCompressionAnalytics();return n.NextResponse.json(e)}catch(r){let e=r instanceof Error?r.message:"Unknown error occurred";return n.NextResponse.json({message:"Failed to fetch compression analytics",error:e},{status:500})}}let c=new i.AppRouteRouteModule({definition:{kind:o.x.APP_ROUTE,page:"/api/admin/analytics/simple-compression/route",pathname:"/api/admin/analytics/simple-compression",filename:"route",bundlePath:"app/api/admin/analytics/simple-compression/route"},resolvedPagePath:"/home/ubuntu/stable/src/app/api/admin/analytics/simple-compression/route.ts",nextConfigOutput:"",userland:s}),{requestAsyncStorage:m,staticGenerationAsyncStorage:l,serverHooks:d}=c,x="/api/admin/analytics/simple-compression/route";function h(){return(0,a.patchFetch)({serverHooks:d,staticGenerationAsyncStorage:l})}}};var r=require("../../../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),s=r.X(0,[2782,606,3716,8620],()=>t(65092));module.exports=s})();