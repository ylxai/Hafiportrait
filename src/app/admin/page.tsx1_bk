/**
 * Admin Dashboard - Mobile Optimized Version
 * Clean version without duplicate hooks
 */

'use client';

import { useState, useEffect } from 'react';
import dynamic from 'next/dynamic';
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import type { Event, Stats } from "@/lib/database";

// Import mobile components
import { MobileBottomNav } from "@/components/admin/mobile-bottom-nav";
import { MobileHeader } from "@/components/admin/mobile-header";
import { ResponsiveGrid, MobileCard } from "@/components/admin/responsive-grid";
import { MobileDataTable } from "@/components/admin/mobile-data-table";
import { 
  MobileFormField, 
  MobileFormSection, 
  MobileFormActions,
  MobileInput,
  MobileTextarea,
  MobileSelect 
} from "@/components/admin/mobile-form";

// Import desktop components
import EventForm from "@/components/admin/EventForm";
import { EventStatusSummary } from "@/components/admin/event-status-summary";
import { AutoStatusManager } from "@/components/admin/auto-status-manager";
import { SmartNotificationManager } from "@/components/admin/smart-notification-manager";
import { QRCodeDialog } from "@/components/admin/qr-code-dialog";
import StatsCards from "@/components/admin/StatsCards";
import { ToastProvider } from "@/components/ui/toast-notification";
import PhotoLightbox from "@/components/photo-lightbox";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import LoadingSpinner from "@/components/ui/loading-spinner";

// Dynamic imports for heavy components
const DSLRMonitor = dynamic(() => import("@/components/admin/dslr-monitor"), {
  ssr: false,
  loading: () => <div className="w-8 h-8"></div>
});

const SystemMonitor = dynamic(() => import("@/components/admin/system-monitor"), {
  ssr: false,
  loading: () => <div className="w-8 h-8"></div>
});

const BackupStatusMonitor = dynamic(() => import("@/components/admin/backup-status-monitor").then(mod => ({ default: mod.BackupStatusMonitor })), {
  ssr: false,
  loading: () => <div className="w-8 h-8"></div>
});

const ColorPaletteSwitcher = dynamic(() => import("@/components/ui/color-palette-switcher").then(mod => mod.ColorPaletteSwitcher), {
  ssr: false,
  loading: () => <div className="w-8 h-8"></div>
});

export default function AdminDashboardMobile() {
  // ALL HOOKS DECLARED FIRST
  const { toast } = useToast();
  const queryClient = useQueryClient();
  
  // Auth state - simplified to prevent loading issues
  const [authState] = useState({
    isLoading: false,
    isAuthenticated: true,
    user: { id: 1, username: 'hafi', full_name: 'Hafi Portrait', role: 'superadmin' }
  });
  
  // State management
  const [activeTab, setActiveTab] = useState('dashboard');
  const [isEventFormOpen, setIsEventFormOpen] = useState(false);
  const [editingEvent, setEditingEvent] = useState<Event | null>(null);
  const [createdEvent, setCreatedEvent] = useState<Event | null>(null);
  const [selectedPhotoTab, setSelectedPhotoTab] = useState("homepage");
  const [selectedEventForPhotos, setSelectedEventForPhotos] = useState("");
  const [isHomepageUploadOpen, setIsHomepageUploadOpen] = useState(false);
  const [isOfficialUploadOpen, setIsOfficialUploadOpen] = useState(false);
  const [isLightboxOpen, setIsLightboxOpen] = useState(false);
  const [selectedPhotoIndex, setSelectedPhotoIndex] = useState<number | null>(null);
  const [isQRDialogOpen, setIsQRDialogOpen] = useState(false);
  const [selectedEventForQR, setSelectedEventForQR] = useState<Event | null>(null);
  
  // Query hooks - NO DUPLICATES
  const { data: stats, isLoading: statsLoading } = useQuery<Stats>({
    queryKey: ['/api/admin/stats'],
    queryFn: () => apiRequest("GET", "/api/admin/stats"),
    staleTime: 30000,
    refetchInterval: 60000,
  });

  const { data: events = [], isLoading: eventsLoading } = useQuery<Event[]>({
    queryKey: ['/api/admin/events'],
    queryFn: () => apiRequest("GET", "/api/admin/events"),
    staleTime: 30000,
    refetchInterval: 60000,
  });

  const { data: homepagePhotos = [], isLoading: homepagePhotosLoading } = useQuery({
    queryKey: ['/api/admin/photos/homepage'],
    queryFn: () => apiRequest("GET", "/api/admin/photos/homepage"),
    staleTime: 30000,
  });

  const { data: eventPhotos = [], isLoading: eventPhotosLoading } = useQuery({
    queryKey: ['/api/admin/events', selectedEventForPhotos, 'photos'],
    queryFn: () => selectedEventForPhotos ? apiRequest("GET", `/api/admin/events/${selectedEventForPhotos}/photos`) : Promise.resolve([]),
    enabled: !!selectedEventForPhotos,
    staleTime: 30000,
  });
  
  // Use auth state
  const auth = authState;
  
  // Logout handler
  const handleLogout = async () => {
    try {
      await fetch("/api/auth/logout", { method: "POST", credentials: "include" });
      queryClient.clear();
      window.location.href = "/admin/login";
    } catch (error) {
      console.error("Logout error:", error);
      window.location.href = "/admin/login";
    }
  };

  // Create/Update event mutations
  const createEventMutation = useMutation({
    mutationFn: async (eventData: any) => {
      const response = await apiRequest("POST", "/api/admin/events", eventData);
      if (!response.ok) throw new Error('Failed to create event');
      return response.json();
    },
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: ['/api/admin/events'] });
      setCreatedEvent(data);
      setIsEventFormOpen(false);
      setEditingEvent(null);
      toast({
        title: "Event berhasil dibuat",
        description: `Event "${data.name}" telah dibuat dengan kode akses: ${data.access_code}`,
      });
    },
    onError: (error) => {
      console.error('Create event error:', error);
      toast({
        title: "Gagal membuat event",
        description: "Terjadi kesalahan saat membuat event. Silakan coba lagi.",
        variant: "destructive",
      });
    },
  });

  const updateEventMutation = useMutation({
    mutationFn: async ({ id, ...eventData }: any) => {
      const response = await apiRequest("PUT", `/api/admin/events/${id}`, eventData);
      if (!response.ok) throw new Error('Failed to update event');
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/admin/events'] });
      setIsEventFormOpen(false);
      setEditingEvent(null);
      toast({
        title: "Event berhasil diperbarui",
        description: "Perubahan telah disimpan.",
      });
    },
    onError: (error) => {
      console.error('Update event error:', error);
      toast({
        title: "Gagal memperbarui event",
        description: "Terjadi kesalahan saat memperbarui event. Silakan coba lagi.",
        variant: "destructive",
      });
    },
  });

  // Event handlers
  const handleCreateEvent = (eventData: any) => {
    createEventMutation.mutate(eventData);
  };

  const handleUpdateEvent = (eventData: any) => {
    if (editingEvent) {
      updateEventMutation.mutate({ id: editingEvent.id, ...eventData });
    }
  };

  const handleEditEvent = (event: Event) => {
    setEditingEvent(event);
    setIsEventFormOpen(true);
  };

  const handleDeleteEvent = async (eventId: string) => {
    if (!confirm('Apakah Anda yakin ingin menghapus event ini?')) return;
    
    try {
      const response = await apiRequest("DELETE", `/api/admin/events/${eventId}`);
      if (!response.ok) throw new Error('Failed to delete event');
      
      queryClient.invalidateQueries({ queryKey: ['/api/admin/events'] });
      toast({
        title: "Event berhasil dihapus",
        description: "Event telah dihapus dari sistem.",
      });
    } catch (error) {
      console.error('Delete event error:', error);
      toast({
        title: "Gagal menghapus event",
        description: "Terjadi kesalahan saat menghapus event. Silakan coba lagi.",
        variant: "destructive",
      });
    }
  };

  const handleShowQR = (event: Event) => {
    setSelectedEventForQR(event);
    setIsQRDialogOpen(true);
  };

  // Photo handlers
  const handlePhotoClick = (index: number) => {
    setSelectedPhotoIndex(index);
    setIsLightboxOpen(true);
  };

  const currentPhotos = selectedPhotoTab === "homepage" ? homepagePhotos : eventPhotos;
  const isPhotosLoading = selectedPhotoTab === "homepage" ? homepagePhotosLoading : eventPhotosLoading;

  return (
    <ToastProvider>
      <div className="min-h-screen bg-gray-50">
        {/* Mobile Header */}
        <MobileHeader 
          user={auth.user}
          onLogout={handleLogout}
          className="lg:hidden"
        />

        {/* Desktop Header */}
        <div className="hidden lg:block bg-white shadow-sm border-b">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex justify-between items-center py-4">
              <div>
                <h1 className="text-2xl font-bold text-gray-900">Admin Dashboard</h1>
                <p className="text-sm text-gray-600">Welcome back, {auth.user?.full_name}</p>
              </div>
              <div className="flex items-center space-x-4">
                <ColorPaletteSwitcher />
                <Button onClick={handleLogout} variant="outline">
                  Logout
                </Button>
              </div>
            </div>
          </div>
        </div>

        {/* Main Content */}
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
            {/* Desktop Tab List */}
            <TabsList className="hidden lg:grid w-full grid-cols-6">
              <TabsTrigger value="dashboard">Dashboard</TabsTrigger>
              <TabsTrigger value="events">Events</TabsTrigger>
              <TabsTrigger value="photos">Photos</TabsTrigger>
              <TabsTrigger value="dslr">DSLR</TabsTrigger>
              <TabsTrigger value="system">System</TabsTrigger>
              <TabsTrigger value="settings">Settings</TabsTrigger>
            </TabsList>

            {/* Dashboard Tab */}
            <TabsContent value="dashboard" className="space-y-6">
              <StatsCards stats={stats} />
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <EventStatusSummary />
                <AutoStatusManager />
              </div>
              <SmartNotificationManager />
            </TabsContent>

            {/* Events Tab */}
            <TabsContent value="events" className="space-y-6">
              <div className="flex justify-between items-center">
                <h2 className="text-xl font-semibold">Event Management</h2>
                <Button onClick={() => setIsEventFormOpen(true)}>
                  Create New Event
                </Button>
              </div>
              
              <div className="grid gap-4">
                {eventsLoading ? (
                  <LoadingSpinner />
                ) : (
                  events.map((event) => (
                    <Card key={event.id}>
                      <CardContent className="p-4">
                        <div className="flex justify-between items-start">
                          <div>
                            <h3 className="font-medium">{event.name}</h3>
                            <p className="text-sm text-gray-600">{event.date}</p>
                            <p className="text-sm text-gray-600">Code: {event.access_code}</p>
                          </div>
                          <div className="flex space-x-2">
                            <Button size="sm" onClick={() => handleShowQR(event)}>
                              QR Code
                            </Button>
                            <Button size="sm" variant="outline" onClick={() => handleEditEvent(event)}>
                              Edit
                            </Button>
                            <Button size="sm" variant="destructive" onClick={() => handleDeleteEvent(event.id)}>
                              Delete
                            </Button>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))
                )}
              </div>
            </TabsContent>

            {/* Photos Tab */}
            <TabsContent value="photos" className="space-y-6">
              <div className="flex justify-between items-center">
                <h2 className="text-xl font-semibold">Photo Management</h2>
              </div>
              
              <Tabs value={selectedPhotoTab} onValueChange={setSelectedPhotoTab}>
                <TabsList>
                  <TabsTrigger value="homepage">Homepage</TabsTrigger>
                  <TabsTrigger value="events">Event Photos</TabsTrigger>
                </TabsList>
                
                <TabsContent value="homepage">
                  <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4">
                    {homepagePhotosLoading ? (
                      <LoadingSpinner />
                    ) : (
                      homepagePhotos.map((photo: any, index: number) => (
                        <div key={photo.id} className="aspect-square bg-gray-200 rounded-lg overflow-hidden cursor-pointer" onClick={() => handlePhotoClick(index)}>
                          <img src={photo.url} alt={photo.original_name} className="w-full h-full object-cover" />
                        </div>
                      ))
                    )}
                  </div>
                </TabsContent>
                
                <TabsContent value="events">
                  <div className="space-y-4">
                    <select 
                      value={selectedEventForPhotos} 
                      onChange={(e) => setSelectedEventForPhotos(e.target.value)}
                      className="w-full p-2 border rounded"
                    >
                      <option value="">Select an event</option>
                      {events.map((event) => (
                        <option key={event.id} value={event.id}>{event.name}</option>
                      ))}
                    </select>
                    
                    {selectedEventForPhotos && (
                      <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4">
                        {eventPhotosLoading ? (
                          <LoadingSpinner />
                        ) : (
                          eventPhotos.map((photo: any, index: number) => (
                            <div key={photo.id} className="aspect-square bg-gray-200 rounded-lg overflow-hidden cursor-pointer" onClick={() => handlePhotoClick(index)}>
                              <img src={photo.url} alt={photo.original_name} className="w-full h-full object-cover" />
                            </div>
                          ))
                        )}
                      </div>
                    )}
                  </div>
                </TabsContent>
              </Tabs>
            </TabsContent>

            {/* DSLR Tab */}
            <TabsContent value="dslr">
              <DSLRMonitor />
            </TabsContent>

            {/* System Tab */}
            <TabsContent value="system">
              <div className="space-y-6">
                <SystemMonitor />
                <BackupStatusMonitor />
              </div>
            </TabsContent>

            {/* Settings Tab */}
            <TabsContent value="settings">
              <Card>
                <CardHeader>
                  <CardTitle>Settings</CardTitle>
                </CardHeader>
                <CardContent>
                  <p>Settings panel coming soon...</p>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </div>

        {/* Mobile Bottom Navigation */}
        <MobileBottomNav 
          activeTab={activeTab}
          onTabChange={setActiveTab}
          className="lg:hidden"
        />

        {/* Dialogs */}
        {isEventFormOpen && (
          <EventForm
            event={editingEvent}
            onSubmit={editingEvent ? handleUpdateEvent : handleCreateEvent}
            onCancel={() => {
              setIsEventFormOpen(false);
              setEditingEvent(null);
            }}
            isLoading={createEventMutation.isPending || updateEventMutation.isPending}
          />
        )}

        {isQRDialogOpen && selectedEventForQR && (
          <QRCodeDialog
            event={selectedEventForQR}
            isOpen={isQRDialogOpen}
            onClose={() => {
              setIsQRDialogOpen(false);
              setSelectedEventForQR(null);
            }}
          />
        )}

        {isLightboxOpen && selectedPhotoIndex !== null && (
          <PhotoLightbox
            photos={currentPhotos}
            initialIndex={selectedPhotoIndex}
            isOpen={isLightboxOpen}
            onClose={() => {
              setIsLightboxOpen(false);
              setSelectedPhotoIndex(null);
            }}
          />
        )}
      </div>
    </ToastProvider>
  );
}