# ================================
# HAFIPORTRAIT PRODUCTION DOCKERFILE
# ================================
# Multi-stage build for performance & security
# ================================

# ---------- BASE ----------
FROM node:20-alpine AS base

# Install system dependencies
RUN apk add --no-cache \
    libc6-compat \
    curl \
    dumb-init

# Set working directory
WORKDIR /app

# Install pnpm & setup cache dirs
RUN npm install -g pnpm@latest && \
    pnpm config set store-dir /app/.pnpm-store && \
    pnpm config set cache-dir /app/.pnpm-cache

# ---------- DEPENDENCIES ----------
FROM base AS deps

# Copy package files
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./

# Install dependencies (cached)
RUN --mount=type=cache,target=/app/.pnpm-store \
    --mount=type=cache,target=/app/.pnpm-cache \
    pnpm install --frozen-lockfile

# ---------- BUILDER ----------
FROM base AS builder

# Copy dependencies
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/package.json ./package.json

# Copy source code
COPY . .

# Copy environment files needed for build
COPY .env.production* ./
COPY .env.local* ./

# Build Next.js
ENV NEXT_TELEMETRY_DISABLED=1 \
    NODE_ENV=production

RUN --mount=type=cache,target=/app/.pnpm-store \
    --mount=type=cache,target=/app/.pnpm-cache \
    --mount=type=cache,target=/app/.next/cache \
    --mount=type=cache,target=/app/node_modules/.cache \
    pnpm build

# ---------- PRODUCTION DEPS ----------
FROM base AS prod-deps

# Copy package files
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./

# Install only production deps
RUN --mount=type=cache,target=/app/.pnpm-store \
    --mount=type=cache,target=/app/.pnpm-cache \
    pnpm install --frozen-lockfile --prod

# ---------- PRODUCTION RUNTIME ----------
FROM node:20-alpine AS production

# Install runtime dependencies
RUN apk add --no-cache \
    libc6-compat \
    curl \
    dumb-init && \
    rm -rf /var/cache/apk/*

# Workdir
WORKDIR /app

# Install pnpm
RUN npm install -g pnpm@latest

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001 && \
    mkdir -p /app/.next /app/node_modules /app/.pnpm-store /app/.pnpm-cache && \
    chown -R nextjs:nodejs /app

# Copy production deps
COPY --from=prod-deps --chown=nextjs:nodejs /app/node_modules ./node_modules
COPY --from=prod-deps --chown=nextjs:nodejs /app/package.json ./package.json

# Copy built app
COPY --from=builder --chown=nextjs:nodejs /app/.next ./.next
COPY --from=builder --chown=nextjs:nodejs /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/next.config.js ./next.config.js
COPY --from=builder --chown=nextjs:nodejs /app/src ./src
COPY --from=builder --chown=nextjs:nodejs /app/scripts ./scripts

# Copy runtime files
COPY --chown=nextjs:nodejs socketio-server.js ./
COPY --chown=nextjs:nodejs .env.production* ./

# Env vars
ENV NODE_ENV=production \
    NEXT_TELEMETRY_DISABLED=1 \
    PORT=3000

USER nextjs

EXPOSE 3000

# Healthcheck
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD curl -f http://localhost:3000/api/health || exit 1

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]
CMD ["pnpm", "start"]
