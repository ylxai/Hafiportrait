# ================================
# HAFIPORTRAIT PRODUCTION DOCKERFILE
# ================================
# PURPOSE: Production-ready Next.js application
# USAGE: docker-compose up hafiportrait-prod
# FEATURES:
#   - Multi-stage build for optimization
#   - Production environment variables
#   - Optimized for performance
#   - Security hardened (non-root user)
#   - Health checks enabled
# ================================
FROM node:20-alpine AS base

# Install system dependencies
RUN apk add --no-cache \
    libc6-compat=1.2.4-r4 \
    curl=8.5.0-r0 \
    dumb-init=1.2.5-r1

# Set working directory
WORKDIR /app

# ✅ FIXED: PNPM cache path conflicts
# ✅ FIXED: All cache paths are user-accessible
# ✅ FIXED: Consistent cache directory structure
RUN npm install -g pnpm@latest && \
    pnpm config set store-dir /app/.pnpm-store && \
    pnpm config set cache-dir /app/.pnpm-cache

# ================================
# DEPENDENCIES LAYER (Cached)
# ================================
FROM base AS deps

# Copy package files for dependency installation
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./

# ✅ FIXED: Multi-layer cache strategy for PNPM
# ✅ FIXED: User-accessible cache paths
# ✅ FIXED: No root path conflicts
RUN --mount=type=cache,target=/app/.pnpm-store \
    --mount=type=cache,target=/app/.pnpm-cache \
    pnpm install --frozen-lockfile

# ================================
# BUILD STAGE
# ================================
FROM base AS builder

# Copy dependencies
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/package.json ./package.json

# Copy source code
COPY . .

# Copy environment files for build
COPY .env.production* ./
COPY .env.local* ./

# Build application with optimizations
ENV NEXT_TELEMETRY_DISABLED=1 \
    NODE_ENV=production

# ✅ IMPROVED: Multi-layer cache strategy for Next.js build
# ✅ FIXED: All cache paths user-accessible
RUN --mount=type=cache,target=/app/.pnpm-store \
    --mount=type=cache,target=/app/.pnpm-cache \
    --mount=type=cache,target=/app/.next/cache \
    --mount=type=cache,target=/app/node_modules/.cache \
    pnpm build

# ================================
# PRODUCTION DEPENDENCIES
# ================================
FROM base AS prod-deps

# Copy package files
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./

# ✅ FIXED: Production dependencies with proper cache
RUN --mount=type=cache,target=/app/.pnpm-store \
    --mount=type=cache,target=/app/.pnpm-cache \
    pnpm install --frozen-lockfile --prod

# ================================
# PRODUCTION RUNTIME
# ================================
FROM node:20-alpine AS production

# Install runtime dependencies
RUN apk add --no-cache \
    libc6-compat=1.2.4-r4 \
    curl=8.5.0-r0 \
    dumb-init=1.2.5-r1 && \
    rm -rf /var/cache/apk/*

WORKDIR /app

# Install pnpm
RUN npm install -g pnpm@latest

# ✅ FIXED: Create user BEFORE copying files
# ✅ FIXED: Proper ownership for cache directories
# ✅ FIXED: No permission conflicts
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001 && \
    mkdir -p /app/.next /app/node_modules /app/.pnpm-store /app/.pnpm-cache && \
    chown -R nextjs:nodejs /app/.next /app/node_modules /app/.pnpm-store /app/.pnpm-cache

# Copy production dependencies with ownership
COPY --from=prod-deps --chown=nextjs:nodejs /app/node_modules ./node_modules
COPY --from=prod-deps --chown=nextjs:nodejs /app/package.json ./package.json

# Copy built application with ownership
COPY --from=builder --chown=nextjs:nodejs /app/.next ./.next
COPY --from=builder --chown=nextjs:nodejs /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/next.config.js ./
COPY --from=builder --chown=nextjs:nodejs /app/src ./src

# Copy runtime files with ownership
COPY --chown=nextjs:nodejs socketio-server.js ./
COPY --from=builder --chown=nextjs:nodejs /app/scripts ./scripts

# Copy environment files with ownership
COPY --chown=nextjs:nodejs .env.production* ./

# Set environment variables (fixed format)
ENV NODE_ENV=production \
    NEXT_TELEMETRY_DISABLED=1 \
    PORT=3000

USER nextjs

# Expose production port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:3000/api/health || exit 1

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]
CMD ["pnpm", "start"]