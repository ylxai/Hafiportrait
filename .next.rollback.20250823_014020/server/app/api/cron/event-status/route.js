"use strict";(()=>{var e={};e.id=80,e.ids=[80],e.modules={20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},57441:e=>{e.exports=require("sharp")},32615:e=>{e.exports=require("http")},35240:e=>{e.exports=require("https")},68621:e=>{e.exports=require("punycode")},76162:e=>{e.exports=require("stream")},17360:e=>{e.exports=require("url")},71568:e=>{e.exports=require("zlib")},52546:(e,t,s)=>{s.r(t),s.d(t,{originalPathname:()=>v,patchFetch:()=>h,requestAsyncStorage:()=>p,routeModule:()=>m,serverHooks:()=>g,staticGenerationAsyncStorage:()=>d});var a={};s.r(a),s.d(a,{GET:()=>c,POST:()=>l});var r=s(30633),o=s(86488),n=s(13342),u=s(90223),i=s(52257);async function c(e){try{let t=e.headers.get("authorization"),s=process.env.CRON_SECRET;if(s&&t!==`Bearer ${s}`)return u.NextResponse.json({message:"Unauthorized"},{status:401});console.log("\uD83D\uDD04 Starting automatic event status management...");let a=await i.P.performStatusHealthCheck();return console.log("✅ Auto status management completed:",{timestamp:a.timestamp,autoCompleted:a.autoComplete.processed,autoActivated:a.autoActivate.processed,archiveSuggestions:a.archiveSuggestions.length,errors:a.summary.errors.length}),(a.summary.totalProcessed>0||a.summary.errors.length>0)&&console.log("\uD83D\uDCE2 Significant changes detected, notifications should be sent"),u.NextResponse.json({success:!0,message:"Automatic event status management completed",results:a,summary:{totalProcessed:a.summary.totalProcessed,suggestionsCount:a.archiveSuggestions.length,errorsCount:a.summary.errors.length,timestamp:a.timestamp}})}catch(e){return console.error("❌ Cron job failed:",e),u.NextResponse.json({success:!1,message:"Automatic event status management failed",error:e.message,timestamp:new Date().toISOString()},{status:500})}}async function l(e){try{let t;let{action:s}=await e.json();switch(s){case"health-check":t=await i.P.performStatusHealthCheck();break;case"auto-complete":t=await i.P.autoCompleteExpiredEvents();break;case"auto-activate":t=await i.P.autoActivateTodayEvents();break;case"suggest-archive":t=await i.P.suggestArchiveForOldEvents();break;default:return u.NextResponse.json({message:"Invalid action"},{status:400})}return u.NextResponse.json({success:!0,action:s,result:t,timestamp:new Date().toISOString()})}catch(e){return console.error("Manual trigger failed:",e),u.NextResponse.json({success:!1,message:"Manual trigger failed",error:e.message,timestamp:new Date().toISOString()},{status:500})}}let m=new r.AppRouteRouteModule({definition:{kind:o.x.APP_ROUTE,page:"/api/cron/event-status/route",pathname:"/api/cron/event-status",filename:"route",bundlePath:"app/api/cron/event-status/route"},resolvedPagePath:"/home/ubuntu/stable/src/app/api/cron/event-status/route.ts",nextConfigOutput:"",userland:a}),{requestAsyncStorage:p,staticGenerationAsyncStorage:d,serverHooks:g}=m,v="/api/cron/event-status/route";function h(){return(0,n.patchFetch)({serverHooks:g,staticGenerationAsyncStorage:d})}},52257:(e,t,s)=>{s.d(t,{P:()=>r});var a=s(68620);class r{static async autoCompleteExpiredEvents(){try{let e=await a.F.getAllEvents(),t=new Date,s=new Date(t.getTime()-864e5),r=e.filter(e=>{let t=new Date(e.date);return"active"===e.status&&t<s}),o=[];for(let e of r)try{await a.F.updateEventStatus(e.id,"completed"),o.push({eventId:e.id,eventName:e.name,status:"success",message:"Auto-completed expired event"})}catch(t){o.push({eventId:e.id,eventName:e.name,status:"error",message:`Failed to auto-complete: ${t}`})}return{processed:r.length,results:o}}catch(e){throw console.error("Auto-complete expired events error:",e),e}}static async suggestArchiveForOldEvents(){try{let e=await a.F.getAllEvents(),t=new Date,s=new Date(t.getTime()-6048e5);return e.filter(e=>{let t=new Date(e.date);return"completed"===e.status&&t<s&&!e.is_archived}).map(e=>({eventId:e.id,eventName:e.name,eventDate:e.date,daysSinceCompletion:Math.floor((t.getTime()-new Date(e.date).getTime())/864e5),suggestion:"archive",reason:"Event completed more than 7 days ago"}))}catch(e){throw console.error("Suggest archive error:",e),e}}static async autoActivateTodayEvents(){try{let e=await a.F.getAllEvents(),t=new Date().toDateString(),s=e.filter(e=>{let s=new Date(e.date).toDateString();return"draft"===e.status&&s===t}),r=[];for(let e of s)try{await a.F.updateEventStatus(e.id,"active"),r.push({eventId:e.id,eventName:e.name,status:"success",message:"Auto-activated today event"})}catch(t){r.push({eventId:e.id,eventName:e.name,status:"error",message:`Failed to auto-activate: ${t}`})}return{processed:s.length,results:r}}catch(e){throw console.error("Auto-activate today events error:",e),e}}static async performStatusHealthCheck(){try{let[e,t,s]=await Promise.all([this.autoCompleteExpiredEvents(),this.suggestArchiveForOldEvents(),this.autoActivateTodayEvents()]);return{timestamp:new Date().toISOString(),autoComplete:e,archiveSuggestions:t,autoActivate:s,summary:{totalProcessed:e.processed+s.processed,suggestionsCount:t.length,errors:[...e.results.filter(e=>"error"===e.status),...s.results.filter(e=>"error"===e.status)]}}}catch(e){throw console.error("Status health check error:",e),e}}}}};var t=require("../../../../webpack-runtime.js");t.C(e);var s=e=>t(t.s=e),a=t.X(0,[2782,606,3716,8620],()=>s(52546));module.exports=a})();