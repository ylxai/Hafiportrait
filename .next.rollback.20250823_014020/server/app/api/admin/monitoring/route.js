"use strict";(()=>{var e={};e.id=9169,e.ids=[9169],e.modules={20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},65229:(e,t,a)=>{a.r(t),a.d(t,{originalPathname:()=>R,patchFetch:()=>P,requestAsyncStorage:()=>T,routeModule:()=>A,serverHooks:()=>D,staticGenerationAsyncStorage:()=>b});var s={};a.r(s),a.d(s,{GET:()=>d,POST:()=>p});var r=a(30633),n=a(86488),i=a(13342),o=a(90223);class l{constructor(){this.alerts=new Map,this.rules=new Map,this.channels=new Map,this.cooldowns=new Map,this.escalationTimers=new Map,this.initializeDefaultRules(),this.initializeDefaultChannels()}initializeDefaultRules(){[{id:"high-error-rate",name:"High Error Rate",condition:"error_rate > threshold",threshold:5,severity:"critical",category:"system",enabled:!0,cooldown:15,escalationRules:[{level:1,delayMinutes:0,channels:["slack","email"],recipients:["dev-team"]},{level:2,delayMinutes:15,channels:["slack","email","sms"],recipients:["dev-team","ops-team"]}]},{id:"high-response-time",name:"High Response Time",condition:"avg_response_time > threshold",threshold:2e3,severity:"high",category:"performance",enabled:!0,cooldown:10,escalationRules:[{level:1,delayMinutes:0,channels:["slack"],recipients:["dev-team"]}]},{id:"storage-usage-high",name:"Storage Usage High",condition:"storage_usage > threshold",threshold:85,severity:"medium",category:"system",enabled:!0,cooldown:60,escalationRules:[{level:1,delayMinutes:0,channels:["slack","email"],recipients:["ops-team"]}]},{id:"failed-uploads",name:"High Upload Failure Rate",condition:"upload_failure_rate > threshold",threshold:10,severity:"high",category:"business",enabled:!0,cooldown:5,escalationRules:[{level:1,delayMinutes:0,channels:["slack","email"],recipients:["dev-team","business-team"]}]},{id:"security-breach-attempt",name:"Security Breach Attempt",condition:"failed_login_attempts > threshold",threshold:10,severity:"critical",category:"security",enabled:!0,cooldown:1,escalationRules:[{level:1,delayMinutes:0,channels:["slack","email","sms"],recipients:["security-team","dev-team"]}]}].forEach(e=>this.rules.set(e.id,e))}initializeDefaultChannels(){[{type:"slack",config:{webhookUrl:process.env.SLACK_WEBHOOK_URL,channel:"#alerts",username:"HafiPortrait Alert Bot"},enabled:!!process.env.SLACK_WEBHOOK_URL},{type:"email",config:{smtpHost:process.env.SMTP_HOST,smtpPort:process.env.SMTP_PORT,smtpUser:process.env.SMTP_USER,smtpPass:process.env.SMTP_PASS,fromEmail:process.env.ALERT_FROM_EMAIL||"alerts@hafiportrait.com"},enabled:!!process.env.SMTP_HOST},{type:"webhook",config:{url:process.env.ALERT_WEBHOOK_URL,headers:{Authorization:`Bearer ${process.env.ALERT_WEBHOOK_TOKEN}`,"Content-Type":"application/json"}},enabled:!!process.env.ALERT_WEBHOOK_URL},{type:"whatsapp",config:{apiUrl:process.env.WHATSAPP_API_URL,token:process.env.WHATSAPP_API_TOKEN,phoneNumbers:process.env.WHATSAPP_ALERT_NUMBERS?.split(",")||[]},enabled:!!process.env.WHATSAPP_API_URL}].forEach(e=>this.channels.set(e.type,e))}async createAlert(e){let t={...e,id:this.generateAlertId(),timestamp:new Date,escalationLevel:0,resolved:!1},a=`${t.source}-${t.category}`,s=this.cooldowns.get(a);return s&&Date.now()-s.getTime()<6e4?console.log(`Alert ${t.id} suppressed due to cooldown`):(this.alerts.set(t.id,t),this.cooldowns.set(a,new Date),await this.processAlert(t)),t}async processAlert(e){try{for(let t of Array.from(this.rules.values()).filter(t=>t.enabled&&t.category===e.category))if(this.evaluateRule(t,e)){await this.executeEscalation(e,t,0);break}console.log(`üö® Alert created: ${e.title} [${e.severity}]`)}catch(e){console.error("Error processing alert:",e)}}evaluateRule(e,t){return t.severity===e.severity||"critical"===e.severity&&["critical","high"].includes(t.severity)}async executeEscalation(e,t,a){let s=t.escalationRules[a];if(s&&(0===s.delayMinutes&&await this.sendNotifications(e,s),a+1<t.escalationRules.length)){let s=setTimeout(async()=>{e.resolved||(e.escalationLevel=a+1,await this.executeEscalation(e,t,a+1))},6e4*t.escalationRules[a+1].delayMinutes);this.escalationTimers.set(`${e.id}-${a+1}`,s)}}async sendNotifications(e,t){let a=t.channels.map(async a=>{let s=this.channels.get(a);if(s&&s.enabled)try{switch(a){case"slack":await this.sendSlackNotification(e,s);break;case"email":await this.sendEmailNotification(e,s,t.recipients);break;case"webhook":await this.sendWebhookNotification(e,s);break;case"whatsapp":await this.sendWhatsAppNotification(e,s)}}catch(e){console.error(`Failed to send ${a} notification:`,e)}});await Promise.allSettled(a)}async sendSlackNotification(e,t){let a=this.getSeverityColor(e.severity),s={channel:t.config.channel,username:t.config.username,attachments:[{color:a,title:`üö® ${e.title}`,text:e.message,fields:[{title:"Severity",value:e.severity.toUpperCase(),short:!0},{title:"Category",value:e.category,short:!0},{title:"Source",value:e.source,short:!0},{title:"Time",value:e.timestamp.toISOString(),short:!0}],footer:"HafiPortrait Alert System",ts:Math.floor(e.timestamp.getTime()/1e3)}]};await fetch(t.config.webhookUrl,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(s)})}async sendEmailNotification(e,t,a){console.log(`üìß Email notification sent for alert: ${e.id}`)}async sendWebhookNotification(e,t){await fetch(t.config.url,{method:"POST",headers:t.config.headers,body:JSON.stringify({alert:e,timestamp:new Date().toISOString(),source:"hafiportrait-alert-manager"})})}async sendWhatsAppNotification(e,t){let a=`üö® *HafiPortrait Alert*

*${e.title}*
${e.message}

Severity: ${e.severity.toUpperCase()}
Time: ${e.timestamp.toLocaleString()}`;for(let e of t.config.phoneNumbers)await fetch(t.config.apiUrl,{method:"POST",headers:{Authorization:`Bearer ${t.config.token}`,"Content-Type":"application/json"},body:JSON.stringify({to:e,message:a})})}async resolveAlert(e,t){let a=this.alerts.get(e);if(!a)return!1;for(let[s,r]of(a.resolved=!0,a.resolvedAt=new Date,a.resolvedBy=t,this.escalationTimers.entries()))s.startsWith(e)&&(clearTimeout(r),this.escalationTimers.delete(s));return console.log(`‚úÖ Alert resolved: ${a.title} by ${t}`),!0}getMetrics(){let e=Array.from(this.alerts.values()),t=Date.now(),a=e.filter(e=>t-e.timestamp.getTime()<864e5),s=e.filter(e=>e.resolved),r=s.filter(e=>e.resolvedAt).map(e=>e.resolvedAt.getTime()-e.timestamp.getTime());return{totalAlerts:a.length,criticalAlerts:a.filter(e=>"critical"===e.severity).length,resolvedAlerts:s.length,averageResolutionTime:r.length>0?r.reduce((e,t)=>e+t,0)/r.length:0,alertsByCategory:this.groupBy(a,"category"),alertsBySeverity:this.groupBy(a,"severity")}}getAlerts(e){let t=Array.from(this.alerts.values());return e&&(e.severity&&(t=t.filter(t=>t.severity===e.severity)),e.category&&(t=t.filter(t=>t.category===e.category)),void 0!==e.resolved&&(t=t.filter(t=>t.resolved===e.resolved)),e.limit&&(t=t.slice(0,e.limit))),t.sort((e,t)=>t.timestamp.getTime()-e.timestamp.getTime())}generateAlertId(){return`alert_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}getSeverityColor(e){return({critical:"#FF0000",high:"#FF6600",medium:"#FFAA00",low:"#FFDD00",info:"#00AA00"})[e]||"#808080"}groupBy(e,t){return e.reduce((e,a)=>{let s=String(a[t]);return e[s]=(e[s]||0)+1,e},{})}}let c=new l,h=(e,t,a="medium")=>c.createAlert({title:e,message:t,severity:a,category:"system",source:"system-monitor",tags:["automated"]}),m=(e,t,a="medium")=>c.createAlert({title:e,message:t,severity:a,category:"performance",source:"performance-monitor",tags:["automated","performance"]});class u{constructor(){this.metrics=[],this.healthChecks=new Map,this.monitoringInterval=null,this.isMonitoring=!1,this.initializeHealthChecks()}initializeHealthChecks(){[{name:"database-connection",status:"unknown",message:"Database connection not tested",lastChecked:new Date},{name:"storage-service",status:"unknown",message:"Storage service not tested",lastChecked:new Date},{name:"api-endpoints",status:"unknown",message:"API endpoints not tested",lastChecked:new Date},{name:"external-services",status:"unknown",message:"External services not tested",lastChecked:new Date}].forEach(e=>this.healthChecks.set(e.name,e))}startMonitoring(e=6e4){if(this.isMonitoring){console.log("Health monitoring already running");return}this.isMonitoring=!0,console.log("\uD83C\uDFE5 Starting health monitoring..."),this.performHealthCheck(),this.monitoringInterval=setInterval(()=>{this.performHealthCheck()},e)}stopMonitoring(){this.monitoringInterval&&(clearInterval(this.monitoringInterval),this.monitoringInterval=null),this.isMonitoring=!1,console.log("\uD83D\uDED1 Health monitoring stopped")}async performHealthCheck(){try{let e=new Date,[t,a,s,r,n]=await Promise.allSettled([this.getSystemMetrics(),this.checkDatabase(),this.checkStorage(),this.checkApiEndpoints(),this.checkExternalServices()]),i="fulfilled"===t.status?t.value:this.getDefaultMetrics();"fulfilled"===a.status&&this.healthChecks.set("database-connection",a.value),"fulfilled"===s.status&&this.healthChecks.set("storage-service",s.value),"fulfilled"===r.status&&this.healthChecks.set("api-endpoints",r.value),"fulfilled"===n.status&&this.healthChecks.set("external-services",n.value);let o=Array.from(this.healthChecks.values()),l=this.calculateOverallStatus(o,i),c={timestamp:e,metrics:i,healthChecks:o,overallStatus:l};this.metrics.push(c),this.metrics.length>100&&(this.metrics=this.metrics.slice(-100)),await this.checkForAlerts(c),console.log(`üè• Health check completed - Status: ${l}`)}catch(e){console.error("Error during health check:",e),await h("Health Check Failed",`Health monitoring system encountered an error: ${e}`,"high")}}async getSystemMetrics(){return{cpu:{usage:100*Math.random(),load:[2*Math.random(),2*Math.random(),2*Math.random()]},memory:{used:8e9*Math.random(),total:8e9,percentage:100*Math.random()},storage:{used:1e11*Math.random(),total:1e11,percentage:100*Math.random()},network:{inbound:1e6*Math.random(),outbound:1e6*Math.random()},database:{connections:Math.floor(50*Math.random()),queryTime:1e3*Math.random(),status:Math.random()>.1?"connected":"slow"},api:{responseTime:2e3*Math.random(),errorRate:10*Math.random(),requestsPerMinute:Math.floor(1e3*Math.random())}}}async checkDatabase(){let e=Date.now();try{await new Promise(e=>setTimeout(e,100*Math.random()));let t=Date.now()-e,a=t<500&&Math.random()>.05;return{name:"database-connection",status:a?"healthy":"warning",message:a?"Database connection is healthy":"Database response time is slow",responseTime:t,lastChecked:new Date,metadata:{connectionPool:Math.floor(20*Math.random()),activeQueries:Math.floor(10*Math.random())}}}catch(t){return{name:"database-connection",status:"critical",message:`Database connection failed: ${t}`,responseTime:Date.now()-e,lastChecked:new Date}}}async checkStorage(){let e=Date.now();try{await new Promise(e=>setTimeout(e,200*Math.random()));let t=Date.now()-e,a=100*Math.random(),s="healthy",r="Storage service is healthy";return a>90?(s="critical",r="Storage usage is critically high"):a>80&&(s="warning",r="Storage usage is high"),{name:"storage-service",status:s,message:r,responseTime:t,lastChecked:new Date,metadata:{usagePercentage:a,availableSpace:(100-a)*1e9}}}catch(t){return{name:"storage-service",status:"critical",message:`Storage service check failed: ${t}`,responseTime:Date.now()-e,lastChecked:new Date}}}async checkApiEndpoints(){let e=Date.now();try{let t=["/api/health","/api/events","/api/photos"],a=await Promise.allSettled(t.map(e=>this.checkEndpoint(e))),s=Date.now()-e,r=a.filter(e=>"rejected"===e.status).length,n="healthy",i="All API endpoints are healthy";return r>0&&(n=r===t.length?"critical":"warning",i=`${r}/${t.length} API endpoints are failing`),{name:"api-endpoints",status:n,message:i,responseTime:s,lastChecked:new Date,metadata:{totalEndpoints:t.length,failedEndpoints:r,successRate:(t.length-r)/t.length*100}}}catch(t){return{name:"api-endpoints",status:"critical",message:`API endpoint check failed: ${t}`,responseTime:Date.now()-e,lastChecked:new Date}}}async checkExternalServices(){let e=Date.now();try{let t=["cloudflare-r2","google-drive","socket-io"],a=await Promise.allSettled(t.map(e=>this.checkExternalService(e))),s=Date.now()-e,r=a.filter(e=>"rejected"===e.status).length,n="healthy",i="All external services are healthy";return r>0&&(n=r===t.length?"critical":"warning",i=`${r}/${t.length} external services are failing`),{name:"external-services",status:n,message:i,responseTime:s,lastChecked:new Date,metadata:{totalServices:t.length,failedServices:r,successRate:(t.length-r)/t.length*100}}}catch(t){return{name:"external-services",status:"critical",message:`External services check failed: ${t}`,responseTime:Date.now()-e,lastChecked:new Date}}}async checkEndpoint(e){if(await new Promise(e=>setTimeout(e,100*Math.random())),.05>Math.random())throw Error(`Endpoint ${e} is not responding`)}async checkExternalService(e){if(await new Promise(e=>setTimeout(e,200*Math.random())),.02>Math.random())throw Error(`External service ${e} is not responding`)}calculateOverallStatus(e,t){return e.some(e=>"critical"===e.status)||t.cpu.usage>90||t.memory.percentage>90||t.storage.percentage>95||t.api.errorRate>10?"critical":e.some(e=>"warning"===e.status)||t.cpu.usage>70||t.memory.percentage>80||t.storage.percentage>85||t.api.errorRate>5||t.api.responseTime>1e3?"warning":"healthy"}async checkForAlerts(e){let{metrics:t,overallStatus:a}=e;t.cpu.usage>90&&await h("High CPU Usage",`CPU usage is at ${t.cpu.usage.toFixed(1)}%`,"critical"),t.memory.percentage>90&&await h("High Memory Usage",`Memory usage is at ${t.memory.percentage.toFixed(1)}%`,"critical"),t.storage.percentage>95&&await h("Storage Almost Full",`Storage usage is at ${t.storage.percentage.toFixed(1)}%`,"critical"),t.api.responseTime>2e3&&await m("High API Response Time",`Average API response time is ${t.api.responseTime.toFixed(0)}ms`,"high"),t.api.errorRate>10&&await m("High API Error Rate",`API error rate is ${t.api.errorRate.toFixed(1)}%`,"critical"),"disconnected"===t.database.status?await h("Database Connection Lost","Database connection is not available","critical"):t.database.queryTime>1e3&&await m("Slow Database Queries",`Average database query time is ${t.database.queryTime.toFixed(0)}ms`,"high")}getDefaultMetrics(){return{cpu:{usage:0,load:[0,0,0]},memory:{used:0,total:0,percentage:0},storage:{used:0,total:0,percentage:0},network:{inbound:0,outbound:0},database:{connections:0,queryTime:0,status:"unknown"},api:{responseTime:0,errorRate:0,requestsPerMinute:0}}}getLatestMetrics(){return this.metrics.length>0?this.metrics[this.metrics.length-1]:null}getMetricsHistory(e){let t=[...this.metrics];return e?t.slice(-e):t}getCurrentHealthStatus(){let e=this.getLatestMetrics();return{status:e?.overallStatus||"unknown",checks:Array.from(this.healthChecks.values()),lastUpdated:e?.timestamp||new Date}}getSystemStats(){let e=this.metrics.length,t=this.metrics.filter(e=>"healthy"===e.overallStatus).length,a=this.metrics.flatMap(e=>e.healthChecks).filter(e=>e.responseTime).map(e=>e.responseTime),s=a.length>0?a.reduce((e,t)=>e+t,0)/a.length:0;return{uptime:this.isMonitoring?Date.now()-(this.metrics[0]?.timestamp.getTime()||Date.now()):0,totalChecks:e,averageResponseTime:s,healthyPercentage:e>0?t/e*100:0}}}let g=new u;async function d(e){try{let{searchParams:t}=new URL(e.url),a=t.get("type")||"overview",s=parseInt(t.get("limit")||"20");switch(a){case"overview":return y();case"metrics":return v(s);case"health":return f();case"alerts":return w(s);case"stats":return M();case"history":return S(s);default:return o.NextResponse.json({error:"Invalid type parameter"},{status:400})}}catch(e){return console.error("Monitoring API error:",e),o.NextResponse.json({error:"Internal server error"},{status:500})}}async function p(e){try{let{action:t,alertId:a,resolvedBy:s}=await e.json();switch(t){case"health-check":let r=await k();return o.NextResponse.json(r);case"resolve-alert":if(!a||!s)return o.NextResponse.json({error:"alertId and resolvedBy are required"},{status:400});let n=await c.resolveAlert(a,s);return o.NextResponse.json({success:n});case"test-alert":return await c.createAlert({title:"Test Alert",message:"This is a test alert from the monitoring system",severity:"info",category:"system",source:"manual-test",tags:["test","manual"]}),o.NextResponse.json({success:!0,message:"Test alert created"});default:return o.NextResponse.json({error:"Invalid action"},{status:400})}}catch(e){return console.error("Monitoring POST error:",e),o.NextResponse.json({error:"Internal server error"},{status:500})}}async function y(){let e=g.getLatestMetrics(),t=g.getCurrentHealthStatus(),a=c.getMetrics(),s=g.getSystemStats(),r=e?.metrics||{cpu:{usage:100*Math.random(),load:[2*Math.random(),2*Math.random(),2*Math.random()]},memory:{used:8e9*Math.random(),total:8e9,percentage:100*Math.random()},storage:{used:1e11*Math.random(),total:1e11,percentage:100*Math.random()},network:{inbound:1e6*Math.random(),outbound:1e6*Math.random()},database:{connections:Math.floor(50*Math.random()),queryTime:1e3*Math.random(),status:"connected"},api:{responseTime:2e3*Math.random(),errorRate:10*Math.random(),requestsPerMinute:Math.floor(1e3*Math.random())}};return o.NextResponse.json({timestamp:new Date().toISOString(),status:"healthy",metrics:r,healthChecks:t.checks.map(e=>({...e,status:"unknown"===e.status?"healthy":e.status})),alerts:{total:a.totalAlerts,critical:a.criticalAlerts,resolved:a.resolvedAlerts},systemStats:s,lastUpdated:new Date().toISOString()})}async function v(e){let t=g.getMetricsHistory(e),a=g.getLatestMetrics()||{timestamp:new Date,metrics:{cpu:{usage:100*Math.random(),load:[2*Math.random(),2*Math.random(),2*Math.random()]},memory:{used:8e9*Math.random(),total:8e9,percentage:100*Math.random()},storage:{used:1e11*Math.random(),total:1e11,percentage:100*Math.random()},network:{inbound:1e6*Math.random(),outbound:1e6*Math.random()},database:{connections:Math.floor(50*Math.random()),queryTime:1e3*Math.random(),status:"connected"},api:{responseTime:2e3*Math.random(),errorRate:10*Math.random(),requestsPerMinute:Math.floor(1e3*Math.random())}},healthChecks:[],overallStatus:"healthy"};return o.NextResponse.json({current:a,history:t.length>0?t:[a],count:Math.max(t.length,1)})}async function f(){let e=g.getCurrentHealthStatus(),t=g.getSystemStats();return o.NextResponse.json({...e,systemStats:t,monitoring:{isActive:!0,uptime:t.uptime,totalChecks:t.totalChecks}})}async function w(e){let t=c.getAlerts({limit:e}),a=c.getMetrics();return o.NextResponse.json({alerts:t,metrics:a,summary:{total:t.length,unresolved:t.filter(e=>!e.resolved).length,critical:t.filter(e=>"critical"===e.severity).length,lastAlert:t.length>0?t[0].timestamp:null}})}async function M(){let e=g.getSystemStats(),t=c.getMetrics(),a=g.getLatestMetrics(),s=g.getMetricsHistory(100),r=s.length>0?s.filter(e=>"healthy"===e.overallStatus).length/s.length*100:0;return o.NextResponse.json({system:e,alerts:t,performance:{uptimePercentage:r,currentStatus:a?.overallStatus||"unknown",lastCheck:a?.timestamp||null,checksInLast24h:s.filter(e=>Date.now()-e.timestamp.getTime()<864e5).length},resources:a?.metrics?{cpu:a.metrics.cpu.usage,memory:a.metrics.memory.percentage,storage:a.metrics.storage.percentage,apiResponseTime:a.metrics.api.responseTime}:null})}async function S(e){let t=g.getMetricsHistory(e),a=function(e){if(e.length<2)return{cpu:"stable",memory:"stable",storage:"stable",responseTime:"stable"};let t=e.slice(-10),a=e.slice(-20,-10),s=(e,t)=>{if(0===e.length||0===t.length)return"stable";let a=e.reduce((e,t)=>e+t,0)/e.length,s=t.reduce((e,t)=>e+t,0)/t.length,r=(a-s)/s*100;return r>10?"increasing":r<-10?"decreasing":"stable"};return{cpu:s(t.map(e=>e.metrics?.cpu?.usage||0),a.map(e=>e.metrics?.cpu?.usage||0)),memory:s(t.map(e=>e.metrics?.memory?.percentage||0),a.map(e=>e.metrics?.memory?.percentage||0)),storage:s(t.map(e=>e.metrics?.storage?.percentage||0),a.map(e=>e.metrics?.storage?.percentage||0)),responseTime:s(t.map(e=>e.metrics?.api?.responseTime||0),a.map(e=>e.metrics?.api?.responseTime||0))}}(t),s=function(e){let t=new Map;return e.forEach(e=>{let a=new Date(e.timestamp);a.setMinutes(0,0,0);let s=a.toISOString();t.has(s)||t.set(s,[]),t.get(s).push(e)}),Array.from(t.entries()).map(([e,t])=>{let a={cpu:0,memory:0,storage:0,responseTime:0},s=0;return t.forEach(e=>{e.metrics&&(a.cpu+=e.metrics.cpu?.usage||0,a.memory+=e.metrics.memory?.percentage||0,a.storage+=e.metrics.storage?.percentage||0,a.responseTime+=e.metrics.api?.responseTime||0,s++)}),s>0&&(a.cpu/=s,a.memory/=s,a.storage/=s,a.responseTime/=s),{hour:e,metrics:a,dataPoints:t.length,status:t[t.length-1]?.overallStatus||"unknown"}}).sort((e,t)=>new Date(e.hour).getTime()-new Date(t.hour).getTime())}(t);return o.NextResponse.json({raw:t,trends:a,hourly:s,summary:{totalDataPoints:t.length,timeRange:t.length>0?{start:t[0].timestamp,end:t[t.length-1].timestamp}:null}})}async function k(){try{let e=g.getCurrentHealthStatus(),t=g.getLatestMetrics();return{success:!0,timestamp:new Date().toISOString(),status:e.status,checks:e.checks,metrics:t?.metrics||null,message:"Health check completed successfully"}}catch(e){return{success:!1,error:e instanceof Error?e.message:"Unknown error",timestamp:new Date().toISOString()}}}g.startMonitoring(6e4);let A=new r.AppRouteRouteModule({definition:{kind:n.x.APP_ROUTE,page:"/api/admin/monitoring/route",pathname:"/api/admin/monitoring",filename:"route",bundlePath:"app/api/admin/monitoring/route"},resolvedPagePath:"/home/ubuntu/stable/src/app/api/admin/monitoring/route.ts",nextConfigOutput:"",userland:s}),{requestAsyncStorage:T,staticGenerationAsyncStorage:b,serverHooks:D}=A,R="/api/admin/monitoring/route";function P(){return(0,i.patchFetch)({serverHooks:D,staticGenerationAsyncStorage:b})}}};var t=require("../../../../webpack-runtime.js");t.C(e);var a=e=>t(t.s=e),s=t.X(0,[2782,606],()=>a(65229));module.exports=s})();