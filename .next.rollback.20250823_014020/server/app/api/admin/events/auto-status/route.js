"use strict";(()=>{var e={};e.id=6939,e.ids=[6939],e.modules={20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},57441:e=>{e.exports=require("sharp")},32615:e=>{e.exports=require("http")},35240:e=>{e.exports=require("https")},68621:e=>{e.exports=require("punycode")},76162:e=>{e.exports=require("stream")},17360:e=>{e.exports=require("url")},71568:e=>{e.exports=require("zlib")},87009:(e,t,s)=>{s.r(t),s.d(t,{originalPathname:()=>g,patchFetch:()=>w,requestAsyncStorage:()=>m,routeModule:()=>d,serverHooks:()=>h,staticGenerationAsyncStorage:()=>v});var a={};s.r(a),s.d(a,{GET:()=>l,POST:()=>p});var r=s(30633),o=s(86488),n=s(13342),u=s(90223),i=s(52257),c=s(68620);async function l(e){try{let{searchParams:t}=new URL(e.url);switch(t.get("action")){case"health-check":let s=await i.P.performStatusHealthCheck();return u.NextResponse.json(s);case"suggest-archive":let a=await i.P.suggestArchiveForOldEvents();return u.NextResponse.json({suggestions:a});case"auto-complete":let r=await i.P.autoCompleteExpiredEvents();return u.NextResponse.json(r);case"auto-activate":let o=await i.P.autoActivateTodayEvents();return u.NextResponse.json(o);default:return u.NextResponse.json({message:"Invalid action. Use: health-check, suggest-archive, auto-complete, auto-activate"},{status:400})}}catch(t){console.error("Auto status management error:",t);let e=t instanceof Error?t.message:"Unknown error";return u.NextResponse.json({message:"Failed to perform auto status management",error:e},{status:500})}}async function p(e){try{let{action:t,eventIds:s}=await e.json();switch(t){case"bulk-archive":if(!s||!Array.isArray(s))return u.NextResponse.json({message:"eventIds array is required for bulk-archive"},{status:400});let a=[];for(let e of s)try{let t=await c.F.updateEventStatus(e,"archived");a.push({eventId:e,status:"success",event:t})}catch(s){let t=s instanceof Error?s.message:"Unknown error";a.push({eventId:e,status:"error",message:t})}return u.NextResponse.json({message:"Bulk archive completed",results:a,summary:{total:s.length,successful:a.filter(e=>"success"===e.status).length,failed:a.filter(e=>"error"===e.status).length}});case"run-all-auto":let r=await i.P.performStatusHealthCheck();return u.NextResponse.json({message:"All automatic status updates completed",results:r});default:return u.NextResponse.json({message:"Invalid action. Use: bulk-archive, run-all-auto"},{status:400})}}catch(t){console.error("Auto status execution error:",t);let e=t instanceof Error?t.message:"Unknown error";return u.NextResponse.json({message:"Failed to execute auto status action",error:e},{status:500})}}let d=new r.AppRouteRouteModule({definition:{kind:o.x.APP_ROUTE,page:"/api/admin/events/auto-status/route",pathname:"/api/admin/events/auto-status",filename:"route",bundlePath:"app/api/admin/events/auto-status/route"},resolvedPagePath:"/home/ubuntu/stable/src/app/api/admin/events/auto-status/route.ts",nextConfigOutput:"",userland:a}),{requestAsyncStorage:m,staticGenerationAsyncStorage:v,serverHooks:h}=d,g="/api/admin/events/auto-status/route";function w(){return(0,n.patchFetch)({serverHooks:h,staticGenerationAsyncStorage:v})}},52257:(e,t,s)=>{s.d(t,{P:()=>r});var a=s(68620);class r{static async autoCompleteExpiredEvents(){try{let e=await a.F.getAllEvents(),t=new Date,s=new Date(t.getTime()-864e5),r=e.filter(e=>{let t=new Date(e.date);return"active"===e.status&&t<s}),o=[];for(let e of r)try{await a.F.updateEventStatus(e.id,"completed"),o.push({eventId:e.id,eventName:e.name,status:"success",message:"Auto-completed expired event"})}catch(t){o.push({eventId:e.id,eventName:e.name,status:"error",message:`Failed to auto-complete: ${t}`})}return{processed:r.length,results:o}}catch(e){throw console.error("Auto-complete expired events error:",e),e}}static async suggestArchiveForOldEvents(){try{let e=await a.F.getAllEvents(),t=new Date,s=new Date(t.getTime()-6048e5);return e.filter(e=>{let t=new Date(e.date);return"completed"===e.status&&t<s&&!e.is_archived}).map(e=>({eventId:e.id,eventName:e.name,eventDate:e.date,daysSinceCompletion:Math.floor((t.getTime()-new Date(e.date).getTime())/864e5),suggestion:"archive",reason:"Event completed more than 7 days ago"}))}catch(e){throw console.error("Suggest archive error:",e),e}}static async autoActivateTodayEvents(){try{let e=await a.F.getAllEvents(),t=new Date().toDateString(),s=e.filter(e=>{let s=new Date(e.date).toDateString();return"draft"===e.status&&s===t}),r=[];for(let e of s)try{await a.F.updateEventStatus(e.id,"active"),r.push({eventId:e.id,eventName:e.name,status:"success",message:"Auto-activated today event"})}catch(t){r.push({eventId:e.id,eventName:e.name,status:"error",message:`Failed to auto-activate: ${t}`})}return{processed:s.length,results:r}}catch(e){throw console.error("Auto-activate today events error:",e),e}}static async performStatusHealthCheck(){try{let[e,t,s]=await Promise.all([this.autoCompleteExpiredEvents(),this.suggestArchiveForOldEvents(),this.autoActivateTodayEvents()]);return{timestamp:new Date().toISOString(),autoComplete:e,archiveSuggestions:t,autoActivate:s,summary:{totalProcessed:e.processed+s.processed,suggestionsCount:t.length,errors:[...e.results.filter(e=>"error"===e.status),...s.results.filter(e=>"error"===e.status)]}}}catch(e){throw console.error("Status health check error:",e),e}}}}};var t=require("../../../../../webpack-runtime.js");t.C(e);var s=e=>t(t.s=e),a=t.X(0,[2782,606,3716,8620],()=>s(87009));module.exports=a})();