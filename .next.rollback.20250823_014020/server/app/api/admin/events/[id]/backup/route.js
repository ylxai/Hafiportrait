"use strict";(()=>{var e={};e.id=6571,e.ids=[6571],e.modules={21841:e=>{e.exports=require("@aws-sdk/client-s3")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},57441:e=>{e.exports=require("sharp")},78893:e=>{e.exports=require("buffer")},84770:e=>{e.exports=require("crypto")},92048:e=>{e.exports=require("fs")},7026:e=>{e.exports=require("googleapis")},32615:e=>{e.exports=require("http")},32694:e=>{e.exports=require("http2")},35240:e=>{e.exports=require("https")},19801:e=>{e.exports=require("os")},55315:e=>{e.exports=require("path")},68621:e=>{e.exports=require("punycode")},76162:e=>{e.exports=require("stream")},17360:e=>{e.exports=require("url")},71568:e=>{e.exports=require("zlib")},84492:e=>{e.exports=require("node:stream")},11517:(e,t,o)=>{o.r(t),o.d(t,{originalPathname:()=>h,patchFetch:()=>v,requestAsyncStorage:()=>d,routeModule:()=>u,serverHooks:()=>g,staticGenerationAsyncStorage:()=>p});var a={};o.r(a),o.d(a,{GET:()=>c,POST:()=>n});var r=o(30633),s=o(86488),i=o(13342),l=o(90223);async function n(e,{params:t}){try{let{id:a}=await t,r=await e.json();console.log(`üéØ Starting backup for event: ${a}`);let s=new(o(48358));await s.initialize();let i=await s.backupEventToGoogleDrive(a,{compressionQuality:r.compressionQuality||.9,includeMetadata:!1!==r.includeMetadata});return console.log(`‚úÖ Backup completed for event ${a}:`,i),l.NextResponse.json({success:!0,message:"Event backup completed successfully",data:i})}catch(e){return console.error(`‚ùå Backup failed for event ${(await t).id}:`,e),l.NextResponse.json({success:!1,message:`Failed to backup event: ${e.message}`,error:e.message},{status:500})}}async function c(e,{params:t}){try{let{id:a}=await t,{searchParams:r}=new URL(e.url),s=r.get("backupId"),i=new(o(48358));if(s){let e=await i.getBackupStatus(s);if(!e)return l.NextResponse.json({success:!1,message:"Backup not found"},{status:404});return l.NextResponse.json({success:!0,data:e})}{let e=(await i.getAllBackupStatuses()).filter(e=>e.eventId===a);return l.NextResponse.json({success:!0,data:e})}}catch(e){return console.error(`‚ùå Failed to get backup status for event ${(await t).id}:`,e),l.NextResponse.json({success:!1,message:`Failed to get backup status: ${e.message}`,error:e.message},{status:500})}}let u=new r.AppRouteRouteModule({definition:{kind:s.x.APP_ROUTE,page:"/api/admin/events/[id]/backup/route",pathname:"/api/admin/events/[id]/backup",filename:"route",bundlePath:"app/api/admin/events/[id]/backup/route"},resolvedPagePath:"/home/ubuntu/stable/src/app/api/admin/events/[id]/backup/route.ts",nextConfigOutput:"",userland:a}),{requestAsyncStorage:d,staticGenerationAsyncStorage:p,serverHooks:g}=u,h="/api/admin/events/[id]/backup/route";function v(){return(0,i.patchFetch)({serverHooks:g,staticGenerationAsyncStorage:p})}},48358:(e,t,o)=>{let a=o(82481);class r{constructor(e={}){this.config={googleDrive:{backupFolder:process.env.GOOGLE_DRIVE_FOLDER_NAME||"HafiPortrait-Photos",compressionQuality:.9,maxConcurrentUploads:3,retryAttempts:3},archive:{enableLocalArchive:!0,localArchivePath:"./event-archives",deleteAfterBackup:!1},...e},this.smartStorageManager=new a,this.backupStatus=new Map}async initialize(){try{await this.smartStorageManager.initializeProviders(),console.log("‚úÖ EventStorageManager initialized")}catch(e){throw console.error("‚ùå Failed to initialize EventStorageManager:",e),e}}async backupEventToGoogleDrive(e,t={}){let o=`backup_${e}_${Date.now()}`;try{console.log(`üéØ Starting event backup: ${e}`),this.backupStatus.set(o,{eventId:e,status:"initializing",startTime:new Date,totalPhotos:0,processedPhotos:0,successfulUploads:0,failedUploads:0,errors:[]});let t=await this.getEventPhotos(e);if(!t||0===t.length)throw Error(`No photos found for event ${e}`);console.log(`üìä Found ${t.length} photos to backup for event ${e}`);let a=this.backupStatus.get(o);a.totalPhotos=t.length,a.status="backing_up",this.backupStatus.set(o,a);let r=`Event_${e}_${new Date().toISOString().split("T")[0]}`,s=await this.createGoogleDriveFolder(r);console.log(`üìÅ Created Google Drive folder: ${r}`),await this.backupPhotosInBatches(t,s.id,o);let i=this.backupStatus.get(o);return i.status="completed",i.endTime=new Date,i.duration=i.endTime-i.startTime,i.googleDriveFolderId=s.id,i.googleDriveFolderUrl=s.webViewLink,this.backupStatus.set(o,i),console.log(`‚úÖ Event backup completed: ${e}`),console.log(`üìä Results: ${i.successfulUploads}/${i.totalPhotos} photos backed up`),{backupId:o,eventId:e,status:"completed",totalPhotos:i.totalPhotos,successfulUploads:i.successfulUploads,failedUploads:i.failedUploads,googleDriveFolderId:s.id,googleDriveFolderUrl:s.webViewLink,duration:i.duration}}catch(a){console.error(`‚ùå Event backup failed for ${e}:`,a);let t=this.backupStatus.get(o);throw t&&(t.status="failed",t.error=a.message,t.endTime=new Date,this.backupStatus.set(o,t)),a}}async getEventPhotos(e){try{let{smartDatabase:t}=await Promise.all([o.e(3716),o.e(8620),o.e(6940)]).then(o.bind(o,36940));return await t.getEventPhotos(e)}catch(t){throw console.error(`‚ùå Failed to get photos for event ${e}:`,t),t}}async createGoogleDriveFolder(e){try{this.smartStorageManager.googleDrive||await this.smartStorageManager.initializeProviders();let t=null,o=null;try{t=(await this.smartStorageManager.googleDrive.createFolder(this.config.googleDrive.backupFolder)).id,console.log(`‚úÖ Main folder ready: ${this.config.googleDrive.backupFolder}`),o=(await this.smartStorageManager.googleDrive.createFolder("EventBackups",t)).id,console.log(`‚úÖ EventBackups subfolder ready`)}catch(e){console.log(`‚ö†Ô∏è Folder hierarchy creation failed, using root: ${e.message}`)}let a=await this.smartStorageManager.googleDrive.createFolder(e,o||t);return console.log(`‚úÖ Event folder created: ${this.config.googleDrive.backupFolder}/EventBackups/${e}`),a}catch(t){throw console.error(`‚ùå Failed to create Google Drive folder ${e}:`,t),t}}async backupPhotosInBatches(e,t,o){let a=this.config.googleDrive.maxConcurrentUploads,r=[];for(let s=0;s<e.length;s+=a){let i=e.slice(s,s+a),l=i.map(e=>this.backupSinglePhoto(e,t,o)),n=await Promise.allSettled(l);r.push(...n);let c=this.backupStatus.get(o);c.processedPhotos=s+i.length,this.backupStatus.set(o,c),console.log(`üìä Backup progress: ${c.processedPhotos}/${c.totalPhotos} photos processed`),s+a<e.length&&await new Promise(e=>setTimeout(e,1e3))}return r}async backupSinglePhoto(e,t,o){let a=this.backupStatus.get(o);try{let r=await this.downloadPhotoBuffer(e),s=`${e.id}_${e.original_name||e.filename}`,i=await this.smartStorageManager.googleDrive.uploadToFolder(r,s,t,{description:`Backup of photo ${e.id} from event ${e.event_id}`,originalUploader:e.uploader_name,albumName:e.album_name});return a.successfulUploads++,this.backupStatus.set(o,a),console.log(`‚úÖ Backed up photo: ${s}`),{success:!0,photo:e.id,result:i}}catch(t){return console.error(`‚ùå Failed to backup photo ${e.id}:`,t),a.failedUploads++,a.errors.push({photoId:e.id,error:t.message}),this.backupStatus.set(o,a),{success:!1,photo:e.id,error:t.message}}}async downloadPhotoBuffer(e){try{if(console.log(`üì• Downloading photo ${e.id} from ${e.storage_provider}:`,{storage_path:e.storage_path,storage_file_id:e.storage_file_id,url:e.url}),"cloudflare-r2"===e.storage_provider&&e.storage_path)return console.log(`üì• Downloading ORIGINAL from R2: ${e.storage_path}`),await this.smartStorageManager.cloudflareR2.downloadPhoto(e.storage_path);if("google-drive"===e.storage_provider&&e.storage_file_id)return console.log(`üì• Downloading from Google Drive: ${e.storage_file_id}`),await this.smartStorageManager.googleDrive.downloadPhoto(e.storage_file_id);if("local"===e.storage_provider&&e.storage_path){console.log(`üì• Downloading from local: ${e.storage_path}`);let t=o(92048).promises;return await t.readFile(e.storage_path)}if(e.url){console.log(`‚ö†Ô∏è FALLBACK: Downloading from public URL (may be compressed): ${e.url}`);let t=await fetch(e.url);if(!t.ok)throw Error(`Failed to download from URL: ${t.statusText}`);return Buffer.from(await t.arrayBuffer())}else throw Error(`No valid storage location found for photo ${e.id}. Provider: ${e.storage_provider}, Path: ${e.storage_path}, FileId: ${e.storage_file_id}, URL: ${e.url}`)}catch(t){throw console.error(`‚ùå Failed to download photo ${e.id}:`,t),t}}async getBackupStatus(e){let t=this.backupStatus.get(e);if(t)return t;try{let{smartDatabase:t}=await Promise.all([o.e(3716),o.e(8620),o.e(6940)]).then(o.bind(o,36940)),{supabaseAdmin:a}=await Promise.all([o.e(3716),o.e(7066)]).then(o.bind(o,87066)),{data:r,error:s}=await a.from("events").select("*").eq("backup_id",e).limit(1);if(s)return console.warn("Database query error:",s),null;if(r&&r.length>0){let t=r[0];return{backupId:e,eventId:t.id,status:t.is_archived?"completed":"unknown",googleDriveFolderId:t.google_drive_backup_url?"archived":null,googleDriveFolderUrl:t.google_drive_backup_url,archivedAt:t.archived_at}}}catch(e){console.warn("Failed to get backup status from database:",e)}return null}async getAllBackupStatuses(){let e=Array.from(this.backupStatus.entries()).map(([e,t])=>({backupId:e,...t}));try{let{supabaseAdmin:t}=await Promise.all([o.e(3716),o.e(7066)]).then(o.bind(o,87066)),{data:a,error:r}=await t.from("events").select("*").not("backup_id","is",null).order("archived_at",{ascending:!1});if(r)return console.warn("Database query error:",r),e;let s=(a||[]).map(e=>({backupId:e.backup_id,eventId:e.id,status:e.is_archived?"completed":"unknown",googleDriveFolderId:e.google_drive_backup_url?"archived":null,googleDriveFolderUrl:e.google_drive_backup_url,archivedAt:e.archived_at})),i=[...e];return s.forEach(e=>{i.find(t=>t.backupId===e.backupId)||i.push(e)}),i}catch(t){return console.warn("Failed to get backup statuses from database:",t),e}}async archiveEvent(e,t){try{console.log(`üóÑÔ∏è Archiving event ${e} after backup ${t}`);let a=await this.getBackupStatus(t);if(!a||"completed"!==a.status)throw Error("Cannot archive event: backup not completed successfully");let{smartDatabase:r}=await Promise.all([o.e(3716),o.e(8620),o.e(6940)]).then(o.bind(o,36940));return await r.updateEvent(e,{is_archived:!0,archived_at:new Date().toISOString(),backup_id:t,google_drive_backup_url:a.googleDriveFolderUrl}),console.log(`‚úÖ Event ${e} archived successfully`),{eventId:e,archived:!0,backupId:t,googleDriveUrl:a.googleDriveFolderUrl}}catch(t){throw console.error(`‚ùå Failed to archive event ${e}:`,t),t}}cleanupOldBackupStatuses(e=6048e5){let t=new Date(Date.now()-e);for(let[e,o]of this.backupStatus.entries())o.startTime<t&&this.backupStatus.delete(e)}}e.exports=r}};var t=require("../../../../../../webpack-runtime.js");t.C(e);var o=e=>t(t.s=e),a=t.X(0,[2782,606,7851,2481],()=>o(11517));module.exports=a})();